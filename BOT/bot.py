from time import time
from datetime import datetime
from random import randint
from aiohttp import ClientSession
from asyncio import sleep
from bs4 import BeautifulSoup
from Cybernator import Paginator
from discord import Client, Embed, Intents, utils
from BOT.config_for_git import token, channels, rolez


def start(services, session):
    sheet = "1OaMpmMMFR_NIzmqtEh12XJ6N4X9R723S4g709FKvj_8"

    bw_ids = [858273631033360384, 856786815130533928]

    month = ["–Ø–Ω–≤.", "–§–µ–≤.", "–ú–∞—Ä—Ç–∞", "–ê–ø—Ä.", "–ú–∞—è", "–ò—é–Ω—è", "–ò—é–ª—è", "–ê–≤–≥.", "–°–µ–Ω—Ç.", "–û–∫—Ç.", "–ù–æ—è–±.", "–î–µ–∫."]
    month_num = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"]

    async def teamSwitch(message, switch):
        switcher = ["–æ—Ç–∫—Ä—ã—Ç–∞", "–∑–∞–∫—Ä—ã—Ç–∞"]
        switcher2 = ["–ó–∞–∫—Ä—ã—Ç—å: /close", "–û—Ç–∫—Ä—ã—Ç—å: /open"]
        role = message.guild.get_role(message.author.roles[1].id)
        if str(role.color) != "#787d85":
            emb = Embed(title="**‚ïê‚ïê‚Ç™ TEAM LEAGUE ‚Ç™‚ïê‚ïê**",
                        description=f"–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–æ–ª–∏.",
                        colour=3553599)
            await message.channel.send(embed=emb)
            return

        teams = services["bot"].spreadsheets().values().get(spreadsheetId=sheet,
                                                            range=f'userlist!A2:C150',
                                                            majorDimension='ROWS'
                                                            ).execute()["values"]
        for i in range(len(teams)):
            if teams[i][0].lower() == role.name.lower():
                if teams[i][2] == switch:
                    emb = Embed(title="**‚ïê‚ïê‚Ç™ TEAM LEAGUE ‚Ç™‚ïê‚ïê**",
                                description=f"–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ {switcher[int(switch)]}.",
                                colour=3553599)
                    await message.channel.send(embed=emb)
                else:
                    services["bot"].spreadsheets().values().batchUpdate(spreadsheetId=sheet,
                                                                        body={"valueInputOption": "USER_ENTERED",
                                                                              "data": [{"range": f'userlist!C{i + 2}',
                                                                                        "majorDimension": "ROWS",
                                                                                        "values": [
                                                                                            [switch]]}]}).execute()
                    emb = Embed(title="**‚ïê‚ïê‚Ç™ TEAM LEAGUE ‚Ç™‚ïê‚ïê**",
                                description=f"–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ {switcher[int(switch)]}. {switcher2[int(switch)]}",
                                colour=3553599)
                    await message.channel.send(embed=emb)

    async def helperVariant(message, variant, helpers, answer):
        for helper in helpers:
            if variant == helper[2] or variant == helper[1]:
                name = f"‚ïê‚ïê‚ïê‚Ç™ {helper[1]} ‚Ç™‚ïê‚ïê‚ïê"
                vk_id = helper[0]
                discord = helper[2]
                games = helper[3]
                warns = helper[4]
                emb = Embed(title=name,
                            url=f"https://vk.com/{vk_id[1:]}",
                            description=f"""**Discord: <@{discord}>
                –ü—Ä–æ–≤–µ–¥–µ–Ω–æ –∏–≥—Ä: `{games}`
                –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: `{warns}`**""", color=3553599)
                emb.set_thumbnail(url=f"https://skin.vimeworld.ru/helm/3d/{helper[1]}.png")
                await message.channel.send(embed=emb)
                return
        await message.channel.send(answer)

    async def membersStatusCheck(members):
        async with ClientSession() as session:
            userIDs = ""
            members = members.replace(" ", "")

            async with session.get(f"https://api.vimeworld.ru/user/name/{members}") as response:
                answer = await response.json()
                if "error" in answer:
                    return "error"

                for user in answer:
                    userIDs += str(user["id"]) + ","
                userIDs = userIDs[:-1]

            async with session.get(f"https://api.vimeworld.ru/user/session/{userIDs}") as response:
                answer = await response.json()
                members = {"Nickname": [],
                           "Session": []}

                for user in answer:
                    members["Nickname"].append(user["username"])
                    members["Session"].append(user["online"]["value"])
                return members

    async def checkTeam(message, name):
        userList = services["bot"].spreadsheets().values().get(spreadsheetId=sheet,
                                                               range=f'userlist!A2:D250',
                                                               majorDimension='ROWS'
                                                               ).execute()["values"]
        rating = services["bot"].spreadsheets().values().get(spreadsheetId=sheet,
                                                             range=f'rate!A2:D250',
                                                             majorDimension='ROWS'
                                                             ).execute()["values"]

        team = {"Name": None,
                "Members": None,
                "Block": None,
                "Warnings": None,
                "Rating": None,
                "Position": None,
                "Games": None,
                "Rank": None}

        for users in userList:
            if users[0].lower() == name.lower():
                team["Name"] = users[0]
                team["Members"] = users[1]
                if users[2] == "1":
                    team["Block"] = "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–∫—Ä—ã—Ç–∞"
                else:
                    team["Block"] = "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫—Ä—ã—Ç–∞"
                team["Warnings"] = users[3]
                break

        for num, rate in enumerate(rating):
            if rate[0].lower() == name.lower():
                team["Rating"] = rate[2]
                team["Position"] = num + 1
                team["Games"] = rate[3]
                team["Rank"] = rate[1]
                break

        if not team["Name"]:
            emb = Embed(title="**‚ïê‚ïê‚Ç™ TEAM LEAGUE ‚Ç™‚ïê‚ïê**", description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ [userlist]",
                        color=3553599)
            await message.channel.send(embed=emb)
            return

        if not team["Position"]:
            emb = Embed(title="**‚ïê‚ïê‚Ç™ TEAM LEAGUE ‚Ç™‚ïê‚ïê**", description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ [rate]",
                        color=3553599)
            await message.channel.send(embed=emb)
            return

        answer = await membersStatusCheck(team["Members"])
        if answer == "error":
            emb = Embed(title="**‚ïê‚ïê‚Ç™ TEAM LEAGUE ‚Ç™‚ïê‚ïê**", description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–æ—Å—Ç–∞–≤–µ –∏–≥—Ä–æ–∫–æ–≤. [userlist]",
                        color=3553599)
            await message.channel.send(embed=emb)
            return

        team["Members"] = answer
        nicknames = ""
        for i in range(len(team["Members"]["Nickname"])):
            if team["Members"]["Session"][i]:
                nicknames += f'üü¢ **{team["Members"]["Nickname"][i]}**\n'
            else:
                nicknames += f'üî¥ **{team["Members"]["Nickname"][i]}**\n'
        emb = Embed(title=f'**‚ïê‚ïê‚Ç™ {team["Name"]} ‚Ç™‚ïê‚ïê**',
                    description=nicknames, color=3553599)
        emb.set_footer(text=f'–†–µ–π—Ç–∏–Ω–≥: {team["Rating"]} [{team["Position"]}/{len(rating) + 1}]\n'
                            f'–ò–≥—Ä: {team["Games"]}\n'
                            f'–ó–≤–∞–Ω–∏–µ: {team["Rank"]}\n'
                            f'–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {team["Warnings"]}\n'
                            f'{team["Block"]}')
        await message.channel.send(embed=emb)

    class MyClient(Client):
        def __init__(self):
            intents = Intents.default()
            intents.members = True
            intents.guilds = True
            super().__init__(intents=intents)

        async def on_ready(self):
            print("Discordo!")
            guild = client.get_guild(856327254178791424)
            for channel in channels:
                channels[channel] = guild.get_channel(channels[channel])
            for role in rolez:
                rolez[role] = guild.get_role(rolez[role])
            try:
                messages = await channels["rating"].history(limit=100).flatten()
                if len(messages) > 1:
                    await channels["rating"].purge(limit=len(messages) - 1)
            except:
                pass

        async def on_message(self, message):
            if message.author == self.user:
                return

            if message.content.startswith("*addteam"):
                await message.delete()
                userRoles = message.author.roles
                if rolez["org2"] not in userRoles and rolez["org"] not in userRoles and rolez["tech"] not in userRoles:
                    dell = await message.channel.send(
                        f"<@{message.author.id}>, –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏ –≤—ã—à–µ.")
                    await dell.delete(delay=10)
                    return

                info = message.content.split()

                if len(info) <= 1 or len(info) > 3:
                    dell = await message.channel.send(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: `{message.content}`. \n"
                                                      f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ *addteam (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã) (—Ü–∏—Ñ—Ä–æ–≤–æ–π id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ / –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
                    await dell.delete(delay=10)
                    return

                wait = await message.channel.send("–ò–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏...")

                permRoles = [rolez["ss"], rolez["helper2"], rolez["org"], rolez["org2"],
                             await message.guild.create_role(name=info[1],
                                                             colour=0x787d85,
                                                             mentionable=True)]
                await wait.edit(content=f"–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. \n–ò–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã...")

                category = None
                if len(info) > 2:
                    category = message.guild.get_channel(int(info[2]))

                chan = await message.guild.create_voice_channel(name=info[1], category=category)
                await chan.set_permissions(message.guild.default_role, connect=False, view_channel=True)
                for perm in permRoles:
                    await chan.set_permissions(perm, connect=True, view_channel=True)

                await wait.edit(
                    content=f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã <#{chan.id}> –¥–ª—è –∫–æ–º–∞–Ω–¥—ã <@&{permRoles[-1].id}> —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                return

            if message.channel == channels["roles"]:
                if "@&" in message.content:
                    removed = "–£–±—Ä–∞–Ω—ã —Ä–æ–ª–∏:"
                    try:
                        role = message.guild.get_role(int(message.content[3:-1]))
                    except ValueError:
                        emb = Embed(title="**‚ïê‚ïê‚Ç™ TEAM LEAGUE ‚Ç™‚ïê‚ïê**",
                                    description=f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–∏–Ω–≥–æ–º —Ä–æ–ª–∏: `{message.content}`",
                                    colour=3553599)
                        await message.channel.send(embed=emb)
                        return
                    if not role:
                        emb = Embed(title="**‚ïê‚ïê‚Ç™ TEAM LEAGUE ‚Ç™‚ïê‚ïê**",
                                    description=f"–í—ã –ø–∏–Ω–≥–∞–Ω—É–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é —Ä–æ–ª—å: `{message.content}`",
                                    colour=3553599)
                        await message.channel.send(embed=emb)
                        return

                    if str(role.color) != "#787d85":
                        emb = Embed(title="**‚ïê‚ïê‚Ç™ TEAM LEAGUE ‚Ç™‚ïê‚ïê**",
                                    description=f"–†–æ–ª—å <@&{role.id}> –Ω–µ –≤—ã–¥–∞–Ω–∞. –≠—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–æ–ª—å.",
                                    colour=3553599)
                        await message.channel.send(embed=emb)
                        return

                    teams = services["bot"].spreadsheets().values().get(spreadsheetId=sheet,
                                                                        range=f'userlist!A2:C150',
                                                                        majorDimension='ROWS'
                                                                        ).execute()["values"]
                    for team in teams:
                        if team[0].lower() == role.name.lower():
                            if team[2] == "1":
                                emb = Embed(title="**‚ïê‚ïê‚Ç™ TEAM LEAGUE ‚Ç™‚ïê‚ïê**",
                                            description=f"–†–æ–ª—å <@&{role.id}> –Ω–µ –≤—ã–¥–∞–Ω–∞. –ö–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ –≤—ã–¥–∞—á—É —Ä–æ–ª–∏.",
                                            colour=3553599)
                                await message.channel.send(embed=emb)
                                break
                            else:
                                for authorRole in message.author.roles:
                                    if str(authorRole.color) == "#787d85":
                                        await message.author.remove_roles(authorRole)
                                        removed += f" {authorRole.name}"
                                await message.author.add_roles(role)
                                emb = Embed(title="**‚ïê‚ïê‚Ç™ TEAM LEAGUE ‚Ç™‚ïê‚ïê**",
                                            description=f"–†–æ–ª—å <@&{role.id}> –≤—ã–¥–∞–Ω–∞.",
                                            colour=3553599)
                                if removed != "–£–±—Ä–∞–Ω—ã —Ä–æ–ª–∏:":
                                    emb.set_footer(text=removed)
                                await message.channel.send(embed=emb)
                                break

                else:
                    if "/close" == message.content:
                        await teamSwitch(message, "1")
                    elif "/open" == message.content:
                        await teamSwitch(message, "0")
                    else:
                        return

            if message.content.startswith("/tl") and message.channel.id in bw_ids:
                answerVariant = [f"–í—ã –Ω–µ –ø–æ–º–æ—â–Ω–∏–∫ Team League.",
                                 f"–ü–æ–º–æ—â–Ω–∏–∫ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {message.content[4:]} –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω."]
                helpers = services["bot"].spreadsheets().values().get(
                    spreadsheetId=sheet,
                    range=f'helpers!A2:E159',
                    majorDimension='ROWS'
                ).execute()["values"]

                if message.content == "/tl":
                    await helperVariant(message, str(message.author.id), helpers, answerVariant[0])

                else:
                    await helperVariant(message, message.content[4:], helpers, answerVariant[1])

            if message.content.startswith("/team") and message.channel.id in bw_ids:
                if message.content == "/team":
                    role = message.guild.get_role(message.author.roles[1].id)
                    if str(role.color) == "#787d85":
                        await checkTeam(message, role.name)
                    else:
                        emb = Embed(colour=3553599)
                        emb.description = """**‚ïê‚ïê‚Ç™ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–∞–Ω–¥ ‚Ç™‚ïê‚ïê**
    ‚ü´ `/team {–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã}` –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∏–∫–Ω–µ–π–º—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã.
    ‚ü´ `üíö` –∞–∫–∫–∞—É–Ω—Ç **–≤ –∏–≥—Ä–µ**
    ‚ü´ `üíõ` –∞–∫–∫–∞—É–Ω—Ç **–Ω–µ –≤ —Å–µ—Ç–∏**"""
                        await message.channel.send(embed=emb)
                        return
                else:
                    await checkTeam(message, message.content[6:].lower())

            if message.channel == channels["rating"]:
                await message.delete()
                if message.content == "/rating":
                    table = services["bot"].spreadsheets().values().get(
                        spreadsheetId=sheet,
                        range='rate!A2:D100',
                        majorDimension='COLUMNS'
                    ).execute()
                    try:
                        team = table["values"][0]
                        rating = table["values"][2]
                        games = table["values"][3]
                    except:
                        return
                    oo = 0
                    teamm = []
                    ratingg = []
                    gamess = []
                    listt = []
                    if len(team) % 7 != 0:
                        for v in range(len(team) // 7 + 1):
                            teamm.append([])
                            ratingg.append([])
                            gamess.append([])
                            listt.append([])
                    else:
                        for v in range(len(team) // 7):
                            teamm.append([])
                            ratingg.append([])
                            gamess.append([])
                            listt.append([])
                    for ww in range(len(team)):
                        teamm[oo].append(team[ww])
                        ratingg[oo].append(rating[ww])
                        gamess[oo].append(games[ww])
                        if len(teamm[oo]) == 7:
                            oo += 1

                    for i in range(len(teamm)):
                        listt[i] = Embed(title="‚ïê‚ïê‚Ç™ TEAM LEAGUE ‚Ç™‚ïê‚ïê", color=3553599)
                        listt[i].add_field(
                            name=f"–ö–æ–º–∞–Ω–¥–∞",
                            value="_ _",
                            inline=True)
                        listt[i].add_field(
                            name=f"–ò–≥—Ä",
                            value="_ _",
                            inline=True)
                        listt[i].add_field(
                            name=f"–†–µ–π—Ç–∏–Ω–≥",
                            value="_ _",
                            inline=True)
                        for o in range(len(teamm[i])):
                            listt[i].add_field(
                                name=f"{teamm[i][o]}",
                                value="_ _",
                                inline=True)
                            listt[i].add_field(
                                name=f"`{gamess[i][o]}`",
                                value="_ _",
                                inline=True)
                            listt[i].add_field(
                                name=f"`{ratingg[i][o]}`",
                                value="_ _",
                                inline=True)
                    embs_all = await message.channel.send(embed=listt[0])
                    page = Paginator(client, embs_all, embeds=listt, only=message.author, timeout=300,
                                     use_remove_reaction=False, delete_message=True)
                    await page.start()

                elif message.content == "/prating":
                    table = services["bot"].spreadsheets().values().get(
                        spreadsheetId=sheet,
                        range='rate!A2:D100',
                        majorDimension='COLUMNS'
                    ).execute()
                    try:
                        team = table["values"][0]
                        rating = table["values"][2]
                        games = table["values"][3]
                    except:
                        return
                    oo = 0
                    teamm = []
                    ratingg = []
                    gamess = []
                    listt = []
                    if len(team) % 7 != 0:
                        for v in range(len(team) // 7 + 1):
                            teamm.append([])
                            ratingg.append([])
                            gamess.append([])
                            listt.append([])
                    else:
                        for v in range(len(team) // 7):
                            teamm.append([])
                            ratingg.append([])
                            gamess.append([])
                            listt.append([])
                    for ww in range(len(team)):
                        teamm[oo].append(team[ww])
                        ratingg[oo].append(rating[ww])
                        gamess[oo].append(games[ww])
                        if len(teamm[oo]) == 7:
                            oo += 1

                    for i in range(len(teamm)):
                        desc = "**–ö–æ–º–∞–Ω–¥–∞ –ò–≥—Ä –†–µ–π—Ç–∏–Ω–≥**\n"
                        for o in range(len(teamm[i])):
                            desc += f"**{teamm[i][o]} `{gamess[i][o]}` `{ratingg[i][o]}`**\n"
                        listt[i] = Embed(title="‚ïê‚ïê‚Ç™ TEAM LEAGUE ‚Ç™‚ïê‚ïê", description=desc, color=3553599)
                    embs_all = await message.channel.send(embed=listt[0])
                    page = Paginator(client, embs_all, embeds=listt, only=message.author, timeout=300,
                                     use_remove_reaction=False, delete_message=True)
                    await page.start()

            if message.content.startswith("/battle") and message.channel == channels["team_league"]:
                now = datetime.now()
                mess = message.content.split()
                for role in message.author.roles:
                    for z in rolez:
                        if role == rolez[z] and role != rolez["ss"]:
                            if now.hour:
                                maps = await channels["map_pool"].fetch_message(858278776236015638)
                                maps = maps.content.split("\n")
                                mapp = maps[randint(0, len(maps) - 1)]
                                emb = Embed(title="‚ïê‚ïê‚ïê‚ïê‚Ç™ TEAM LEAGUE ‚Ç™‚ïê‚ïê‚ïê‚ïê",
                                            description=f"**{mess[1]} vs {mess[2]}**\n**–í–µ–¥—É—â–∏–π: <@{message.author.id}>**\n**–ö–∞—Ä—Ç–∞: {mapp}**",
                                            color=3553599)
                                mm = await message.channel.send(embed=emb)
                                emb = Embed(title="‚ïê‚ïê‚ïê‚ïê‚Ç™ TEAM LEAGUE ‚Ç™‚ïê‚ïê‚ïê‚ïê",
                                            url=f"https://discord.com/channels/856327254178791424/858273631033360384/{mm.id}",
                                            description=f"**{mess[1]} vs {mess[2]}**\n**–í–µ–¥—É—â–∏–π: <@{message.author.id}>**\n**–ö–∞—Ä—Ç–∞: {mapp}**\n**ID: `{mm.id}`**",
                                            color=3553599)
                                emb.set_footer(text="""1Ô∏è‚É£ - –ø–æ–±–µ–¥–∏–ª–∞ –ø–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
2Ô∏è‚É£ - –ø–æ–±–µ–¥–∏–ª–∞ –≤—Ç–æ—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞
‚èπÔ∏è- –æ—Ç–º–µ–Ω–∞ –∏–≥—Ä—ã""")
                                m = await channels["match_logs"].send(embed=emb)
                                await sleep(0.2)
                                await m.add_reaction("1Ô∏è‚É£")
                                await m.add_reaction("2Ô∏è‚É£")
                                await m.add_reaction("‚èπÔ∏è")
                                break
                            else:
                                emb = Embed(title="‚ïê‚ïê‚Ç™ TEAM LEAGUE ‚Ç™‚ïê‚ïê",
                                            description=f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è `/battle` –º–æ–∂–Ω–æ —Å 13:00 –ø–æ 23:00 –ø–æ –º—Å–∫.**",
                                            color=3553599)
                                await message.channel.send(embed=emb)
                                break

            if message.content.startswith("/addplayer") and message.channel == channels["payload"]:
                start_time = round(time()) + 3500 * 3
                user_role = message.author.roles[1]
                if user_role.name == "BedWars":
                    await message.channel.send(embed=Embed(title="‚ïê‚ïê‚Ç™ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ ‚Ç™‚ïê‚ïê",
                                                           description=f"–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–æ–ª–∏.",
                                                           color=3553599))
                else:
                    addp = message.content.split(" ")
                    stop = False
                    mess = await message.channel.send(embed=Embed(title="‚ïê‚ïê‚Ç™ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ ‚Ç™‚ïê‚ïê",
                                                                  description=f"‚è≤Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç {addp[2]}",
                                                                  color=3553599))
                    while start_time + 300 > round(time()) + 3500 * 3 and not stop:
                        payload = session.get("https://cp.vimeworld.ru/real?paylog")
                        soup = BeautifulSoup(payload.text, 'lxml')
                        payload_list = []
                        i = 0
                        for tag in soup.find_all("tr"):
                            if i != 0 and i < 10:
                                payload_list.append(tag.text.split("\n"))
                            else:
                                if i >= 10:
                                    break
                            i += 1

                        for ii in range(len(payload_list)):
                            timee = payload_list[ii][2].split()
                            for i in range(len(month)):
                                if str(timee[1]) == str(month[i]):
                                    timee[1] = month_num[i]
                                    break
                            if timee[3][1] == ":":
                                timee[3] = f"0{timee[3]}"
                            timee = f"{timee[2]}-{timee[1]}-{timee[0]} {timee[3]}:00"
                            dt = datetime.fromisoformat(timee)
                            payload_list[ii][2] = round(dt.timestamp())
                        for ww in range(len(payload_list)):
                            if round(start_time) < payload_list[ww][2]:
                                if addp[2].lower() in payload_list[ww][-2].lower() and payload_list[ww][-3] == "+30":
                                    stop = True
                                    break
                        await sleep(5)
                    if start_time + 300 < round(time()) + 3500 * 3:
                        await mess.edit(embed=Embed(title="‚ïê‚ïê‚Ç™ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ ‚Ç™‚ïê‚ïê",
                                                    description=f"–í—Ä–µ–º—è –≤—ã—à–ª–æ.",
                                                    color=3553599))
                    else:
                        valuess = services["bot"].spreadsheets().values().get(
                            spreadsheetId=sheet["team_league"],
                            range=f'userlist!A2:B150',
                            majorDimension='ROWS'
                        ).execute()["values"]
                        for i in range(len(valuess)):
                            if valuess[i][0].lower() == user_role.name.lower():
                                services["bot"].spreadsheets().values().batchUpdate(spreadsheetId=sheet["team_league"],
                                                                                    body={
                                                                                        "valueInputOption": "USER_ENTERED",
                                                                                        "data": [
                                                                                            {
                                                                                                "range": f'userlist!B{i + 2}',
                                                                                                "majorDimension": "ROWS",
                                                                                                "values": [[
                                                                                                    f"{valuess[i][1]}, {addp[1]}"]]}]}).execute()
                        await mess.edit(embed=Embed(title="‚ïê‚ïê‚Ç™ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ ‚Ç™‚ïê‚ïê",
                                                    description=f"–ò–≥—Ä–æ–∫ {addp[1]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É <@&{user_role.id}>",
                                                    color=3553599))

        async def on_raw_reaction_add(self, payload):
            try:
                if payload.channel_id == channels["match_logs"].id:
                    channel = self.get_channel(payload.channel_id)
                    message = await channel.fetch_message(payload.message_id)
                    member = utils.get(message.guild.members, id=payload.user_id)
                    mess = message.embeds[0].description
                    if str(member.id) in mess or rolez["org2"] in member.roles:
                        emoji = str(payload.emoji)
                        mes = mess.split("\n")
                        mes[1] = mes[1].replace("**–í–µ–¥—É—â–∏–π: <@", "")
                        mes[1] = mes[1].replace(">**", "")
                        if emoji == "‚èπÔ∏è":
                            emb = Embed(title="‚ïê‚ïê‚ïê‚ïê‚Ç™ TEAM LEAGUE ‚Ç™‚ïê‚ïê‚ïê‚ïê",
                                        url=f"https://discord.com/channels/856327254178791424/858273631033360384/{mes[3][7:-3]}",
                                        description=f"**–û—Ç–º–µ–Ω–∞ –∏–≥—Ä—ã**\n**–ù–∞–ø–∏—Å–∞–ª –∫–æ–º–∞–Ω–¥—É: <@{mes[1]}>**\n{mes[3]}",
                                        color=3553599)
                            await message.edit(embed=emb)
                            await message.clear_reactions()
                        else:

                            mes[0] = mes[0].replace("**", "")
                            mes[0] = mes[0].replace("<@&", "")
                            mes[0] = mes[0].replace(">", "")
                            mes[0] = mes[0].split(" vs ")
                            team1 = mes[0][0]
                            team2 = mes[0][1]
                            role1 = client.get_guild(856327254178791424).get_role(int(team1))
                            role2 = client.get_guild(856327254178791424).get_role(int(team2))

                            if emoji == "1Ô∏è‚É£":
                                X = 1
                                valuess = services["bot"].spreadsheets().values().get(
                                    spreadsheetId=sheet["team_league"],
                                    range=f'matches!A{str(X)}:A1000',
                                    majorDimension='COLUMNS'
                                ).execute()
                                try:
                                    X += len(valuess["values"][0])
                                except:
                                    pass
                                services["bot"].spreadsheets().values().batchUpdate(
                                    spreadsheetId=sheet["team_league"],
                                    body={
                                        "valueInputOption": "USER_ENTERED",
                                        "data": [{"range": f'matches!A{str(X)}:G{str(X)}',
                                                  "majorDimension": "ROWS",
                                                  "values": [
                                                      [str(role1), str(role2), str(mes[1]), str(mes[3][7:-3]),
                                                       str(datetime.now())[:-7]]]}]}).execute()
                                emb = Embed(title="‚ïê‚ïê‚ïê‚ïê‚Ç™ TEAM LEAGUE ‚Ç™‚ïê‚ïê‚ïê‚ïê",
                                            url=f"https://discord.com/channels/856327254178791424/858273631033360384/{mes[3][7:-3]}",
                                            description=f"**–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <@&{team1}>**\n**–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: <@&{team2}>**\n**–ü—Ä–æ–≤–µ–ª –∏–≥—Ä—É"
                                                        f": <@{mes[1]}>**\n{mes[3]}",
                                            color=3553599)
                                await message.edit(embed=emb)
                                await message.clear_reactions()
                            elif emoji == "2Ô∏è‚É£":
                                X = 2
                                valuess = services["bot"].spreadsheets().values().get(
                                    spreadsheetId=sheet["team_league"],
                                    range=f'matches!A{str(X)}:A1000',
                                    majorDimension='COLUMNS'
                                ).execute()
                                try:
                                    X += len(valuess["values"][0])
                                except:
                                    pass
                                services["bot"].spreadsheets().values().batchUpdate(
                                    spreadsheetId=sheet["team_league"],
                                    body={
                                        "valueInputOption": "USER_ENTERED",
                                        "data": [{"range": f'matches!A{str(X)}:G{str(X)}',
                                                  "majorDimension": "ROWS",
                                                  "values": [
                                                      [str(role2), str(role1), str(mes[1]), str(mes[3][7:-3]),
                                                       str(datetime.now())[:-7]]]}]}).execute()
                                emb = Embed(title="‚ïê‚ïê‚ïê‚ïê‚Ç™ TEAM LEAGUE ‚Ç™‚ïê‚ïê‚ïê‚ïê",
                                            url=f"https://discord.com/channels/856327254178791424/858273631033360384/{mes[3][7:-3]}",
                                            description=f"**–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <@&{team2}>**\n**–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: <@&{team1}>**\n**–ü—Ä–æ–≤–µ–ª –∏–≥—Ä—É"
                                                        f": <@{mes[1]}>**\n{mes[3]}",
                                            color=3553599)
                                await message.edit(embed=emb)
                                await message.clear_reactions()
            except:
                pass

    client = MyClient()
    client.run(token["bot"])
